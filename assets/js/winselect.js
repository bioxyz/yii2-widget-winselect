/**
 * defind javascript function
 */
JSON.stringify = JSON.stringify || function (obj) {
    var t = typeof (obj);
    if (t != "object" || obj === null) {
        // simple data type
        if (t == "string") obj = '"'+obj+'"';
        return String(obj);
    }
    else {
        // recurse array or object
        var n, v, json = [], arr = (obj && obj.constructor == Array);
        for (n in obj) {
            v = obj[n]; t = typeof(v);
            if (t == "string") v = '"'+v+'"';
            else if (t == "object" && v !== null) v = JSON.stringify(v);
            json.push((arr ? "" : '"' + n + '":') + String(v));
        }
        return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}");
    }
};

function replaceHTMLChars(value){
    return value.replace(/&amp;/gi,'&')
            .replace(/&lt;/gi,'<')
            .replace(/&gt;/gi,'>')
            .replace(/&#039;/gi,'\'')
            .replace(/&quot;/gi,'"');
}
    
function get_close_popup()
{
    return window.document.close_popup;
}

function set_return_basic(popup_reply_data, filter) {
    var form_name = popup_reply_data.form_name;
    var name_to_value_array = popup_reply_data.name_to_value_array;
    for (var the_key in name_to_value_array) {
        if (the_key.match(filter)) {
            var displayValue = replaceHTMLChars(name_to_value_array[the_key]);
            if (window.document.forms[form_name] && window.document.forms[form_name].elements[the_key]) {
                if (window.document.forms[form_name].elements[the_key].tagName == 'SELECT') {
                    var selectField = window.document.forms[form_name].elements[the_key];
                    for (var i = 0; i < selectField.options.length; i++) {
                        if (selectField.options[i].text == displayValue) {
                            selectField.options[i].selected = true;
                            // TODO: trigger onchange event manually
                            break;
                        }
                    }
                } else {
                    window.document.forms[form_name].elements[the_key].value = displayValue;
                    // TODO: trigger onchange event manually
                }
            }
        }
    }
}

function open_window(controller_name, width, height, url_params, popupwin_input_data, 
                     close_popup, clear_button, window_mode) {
    if (typeof (popupwinCount) == "undefined" || popupwinCount == 0)
        popupwinCount = 1;
    window.document.popupwin_input_data = popupwin_input_data;
    window.document.close_popup = close_popup;
    
    URL = 'index.php?r=' + controller_name + '/popupwin';
    if (url_params != '') {
        URL += '&query=true' + url_params;
        winName = url_params.replace(/[^a-z_0-9]+/ig, '_');
        windowName = controller_name.replace(/[^a-z_0-9]+/ig, '_') + '_popupwin' + winName;
    } else {
        windowName = controller_name.replace(/[^a-z_0-9]+/ig, '_') + '_popupwin' + popupwinCount;
    }
    popupwinCount++;
    if (clear_button) {
        URL += '&clear_button=true';
    }
    windowFeatures = 'width=' + width +
            ',height=' + height +
            ',resizable=1,scrollbars=1';
    if (window_mode == '' || window_mode == undefined) {
        window_mode = 'single';
    }
    URL += '&mode=' + window_mode;
    
    var request_data = popupwin_input_data;
    var property_field_mapping_url = '';
    if (request_data && request_data.property_field_mapping != undefined) {
        for (var key in request_data.property_field_mapping) {
            if (key.toLowerCase() != 'id') {
                property_field_mapping_url += '&property_to_field[]=' + encodeURIComponent(key.toLowerCase());
            }
        }
    }
    if (property_field_mapping_url) {
        URL += property_field_mapping_url;
    }
    win = window.open(URL, windowName, windowFeatures);
    if (window.focus) {
        win.focus();
    }
    win.popupwinCount = popupwinCount;
    return win;
}

/**
 * 
 * @param json callback_data generated by child window data
 * @returns void
 */
function set_return(popupwin_return_data) {
    set_return_basic(popupwin_return_data, /\S/);
}

function get_popupwin_input_data()
{
    return JSON.stringify(window.document.popupwin_input_data);
}
